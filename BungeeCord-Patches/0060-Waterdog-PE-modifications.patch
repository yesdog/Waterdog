From 7286009918b9b3d543fbf6bec10dff37528a33ba Mon Sep 17 00:00:00 2001
From: Colin Godsey <crgodsey@gmail.com>
Date: Tue, 16 Apr 2019 07:50:25 -0600
Subject: [PATCH] Waterdog PE (modifications)


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index a4011335..0752e963 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -221,19 +221,17 @@ public abstract class ProxyServer
      * @param restricted whether the server info restricted property will be set
      * @return the constructed instance
      */
-    public abstract ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted);
+    // Waterdog start
+    public abstract ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted, boolean isRakNet, String transferGroup);
 
-    /**
-     * Factory method to construct an implementation specific server info
-     * instance.
-     *
-     * @param name name of the server
-     * @param address connectable Minecraft address + port of the server
-     * @param motd the motd when used as a forced server
-     * @param restricted whether the server info restricted property will be set
-     * @return the constructed instance
-     */
-    public abstract ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted);
+    public ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted) {
+        return constructServerInfo(name, address, motd, restricted, false, "default");
+    }
+
+    public ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted) {
+        return constructServerInfo(name, address, motd, restricted, false, "default");
+    }
+    // Waterdog end
 
     /**
      * Returns the console overlord for this proxy. Being the console, this
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
index 71abdc87..4584c09e 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
@@ -72,13 +72,26 @@ public class ListenerInfo
      * Whether to support HAProxy PROXY protocol.
      */
     private final boolean proxyProtocol;
+    // Waterdog start
+    /**
+     * Whether this listener is a PE listener.
+     */
+    private final boolean rakNet;
+    // Waterdog end
 
     @Deprecated
     public ListenerInfo(InetSocketAddress host, String motd, int maxPlayers, int tabListSize, List<String> serverPriority, boolean forceDefault, Map<String, String> forcedHosts, String tabListType, boolean setLocalAddress, boolean pingPassthrough, int queryPort, boolean queryEnabled)
     {
-        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false );
+        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false, false); // Waterdog
     }
 
+    // Waterdog start
+    public ListenerInfo(InetSocketAddress host, String motd, int maxPlayers, int tabListSize, List<String> serverPriority, boolean forceDefault, Map<String, String> forcedHosts, String tabListType, boolean setLocalAddress, boolean pingPassthrough, int queryPort, boolean queryEnabled, boolean proxyProtocol)
+    {
+        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, proxyProtocol, false );
+    }
+    // Waterdog end
+
     /**
      * Gets the highest priority server to join.
      *
@@ -115,4 +128,10 @@ public class ListenerInfo
     {
         return (InetSocketAddress) socketAddress;
     }
+
+    // Waterdog start
+    public boolean needsRealQuery() {
+        return queryEnabled && (!rakNet || queryPort != ((InetSocketAddress) socketAddress).getPort());
+    }
+    // Waterdog end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
index b0fc000a..f897f9e1 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
@@ -115,4 +115,11 @@ public interface ServerInfo
      * @param callback the callback to call when the count has been retrieved.
      */
     void ping(Callback<ServerPing> callback);
+
+    // Waterdog start
+    /**
+     * Whether this server should use the RakNet UDP protocol.
+     */
+    boolean isRakNet();
+    // Waterdog end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index f7459860..4f13a7a3 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -254,6 +254,15 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     UUID getUniqueId();
 
+    // Waterdog start
+    /**
+     * Get the player's Xbox User ID (XUID) for Bedrock players.
+     *
+     * @return XUID as a BigInteger, or null if not present.
+     */
+    java.math.BigInteger getXUID();
+    // Waterdog end
+
     /**
      * Gets this player's locale.
      *
diff --git a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
index aefe026e..288406fc 100644
--- a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
+++ b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
@@ -76,6 +76,12 @@ public class ServerConnectRequestTest
         public void ping(Callback<ServerPing> callback)
         {
         }
+
+        // Waterdog start
+        public boolean isRakNet() {
+            return true;
+        }
+        // Waterdog end
     };
 
     @Test(expected = NullPointerException.class)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index 252389bd..014baa6d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -190,4 +190,42 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+
+    // Waterdog start
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePack resourcePack) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourceStack resourceStock) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PECommand command) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionRequest encryptionRequest) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionResponse encryptionResponse) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse resourcePackResponse) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket setDisplayObjectivePacket) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PERemoveObjectivePacket removeObjectivePacket) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest resourcePackChunkRequest) throws Exception
+    {
+    }
+    // Waterdog end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index e56bfccb..141d57be 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -10,6 +10,47 @@ import lombok.RequiredArgsConstructor;
 @RequiredArgsConstructor
 public abstract class DefinedPacket
 {
+    // Waterdog start
+    public static void writeVarLong(long varlong, ByteBuf to) {
+        while ((varlong & 0xFFFFFFFFFFFFFF80L) != 0x0L) {
+            to.writeByte((int) (varlong & 0x7FL) | 0x80);
+            varlong >>>= 7;
+        }
+        to.writeByte((int) varlong);
+    }
+
+    public static long readVarLong(ByteBuf from) {
+        long varlong = 0L;
+        int length = 0;
+        byte part;
+        do {
+            part = from.readByte();
+            varlong |= (part & 0x7F) << (length++ * 7);
+            if (length > 10) {
+                throw new RuntimeException("VarLong too big");
+            }
+        } while ((part & 0x80) == 0x80);
+        return varlong;
+    }
+
+    public static long readSVarLong(ByteBuf from) {
+        long varlong = readVarLong(from);
+        return (varlong >> 1) ^ -(varlong & 1);
+    }
+
+    public static void writeSVarLong(long varlong, ByteBuf to) {
+        writeVarLong((varlong << 1) ^ (varlong >> 63), to);
+    }
+
+    public static int readSVarInt(ByteBuf from) {
+        int varint = readVarInt(from);
+        return (varint >> 1) ^ -(varint & 1);
+    }
+
+    public static void writeSVarInt(int varint, ByteBuf to) {
+        writeVarInt((varint << 1) ^ (varint >> 31), to);
+    }
+    // Waterdog end
 
     public static void writeString(String s, ByteBuf buf)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 6c3c7ab8..b005affb 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -28,10 +28,22 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     }
 
     @Override
-    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
-    {
-        Protocol.DirectionData prot = ( server ) ? protocol.TO_SERVER : protocol.TO_CLIENT;
-        ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
+        Protocol.DirectionData prot = (server) ? protocol.TO_SERVER : protocol.TO_CLIENT;
+        // Waterdog start - replace in.copy()
+        //ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+        /* Modification due to a misunderstanding of the primary (md_5) or secondary (yesdog) author... not sure.
+        But lets make sure we have 16 bytes of *head* room for rewriting, plus 16 tail. */
+        //TODO: lets figure out some way to make this not suck so much. maybe only resize/copy if the size really needs to change
+        ByteBuf slice = ctx.alloc().ioBuffer(in.readableBytes() + 32);
+        slice.writerIndex(slice.writerIndex() + 16);
+        slice.readerIndex(slice.writerIndex());
+        try {
+            slice.writeBytes(in.markReaderIndex());
+        } finally {
+            in.resetReaderIndex();
+        }
+        // Waterdog end
 
         Object packetTypeInfo = null;
         try
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index d4b03843..98ecafec 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -23,4 +23,14 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
         msg.write( out, prot.getDirection(), protocolVersion );
     }
+
+    // Waterdog start
+    @Override
+    public boolean acceptOutboundMessage(Object msg) throws Exception {
+        Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
+        if (ProtocolConstants.isPE(protocolVersion) && msg instanceof DefinedPacket &&
+                !prot.hasPacket(((DefinedPacket) msg).getClass(), protocolVersion)) return false;
+        return super.acceptOutboundMessage(msg);
+    }
+    // Waterdog end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index aa1515f4..a90e7d0b 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -52,6 +52,18 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEHandshake.class,
+                    network.ycc.waterdog.pe.packet.PEHandshake::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x01 )
+            );
+            TO_CLIENT.registerPacket(
+                    KeepAlive.class,
+                    KeepAlive::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 )
+            );
+            // Waterdog end
             TO_SERVER.registerPacket(
                     Handshake.class,
                     Handshake::new, // Waterfall - speed up packet construction
@@ -64,9 +76,67 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePack.class,
+                    network.ycc.waterdog.pe.packet.PEResourcePack::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x06 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourceStack.class,
+                    network.ycc.waterdog.pe.packet.PEResourceStack::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x07 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest.class,
+                    network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x54 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePackResponse.class,
+                    network.ycc.waterdog.pe.packet.PEResourcePackResponse::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x08 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PELogin.class,
+                    network.ycc.waterdog.pe.packet.PELogin::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x0B )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PETransfer.class,
+                    network.ycc.waterdog.pe.packet.PETransfer::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x55 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket.class,
+                    network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x6b )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PERemoveObjectivePacket.class,
+                    network.ycc.waterdog.pe.packet.PERemoveObjectivePacket::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x6a )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PECommand.class,
+                    network.ycc.waterdog.pe.packet.PECommand::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x4D )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PELocalPlayerInitialized.class,
+                    network.ycc.waterdog.pe.packet.PELocalPlayerInitialized::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x71 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEStopSoundPacket.class,
+                    network.ycc.waterdog.pe.packet.PEStopSoundPacket::new,
+                    Protocol.map( ProtocolConstants.MINECRAFT_PE_1_8, 0x57 )
+            );
+            // Waterdog end
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
@@ -84,6 +154,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     Chat.class,
                     Chat::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
@@ -92,6 +163,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     Respawn.class,
                     Respawn::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x3D ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x07 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x33 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x34 ),
@@ -103,6 +175,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     BossBar.class,
                     BossBar::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x4A ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x0D )
             );
@@ -196,6 +269,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
@@ -205,6 +279,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
@@ -263,6 +338,7 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0C ),
@@ -273,6 +349,7 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     Chat.class,
                     Chat::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x03 ),
@@ -292,6 +369,7 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     ClientSettings.class,
                     ClientSettings::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x45 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x05 ),
@@ -301,6 +379,7 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x17 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x09 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0A ),
@@ -343,9 +422,22 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEEncryptionRequest.class,
+                    network.ycc.waterdog.pe.packet.PEEncryptionRequest::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x03 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEEncryptionResponse.class,
+                    network.ycc.waterdog.pe.packet.PEEncryptionResponse::new,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x04 )
+            );
+            // Waterdog end
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
@@ -356,6 +448,7 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
                     LoginSuccess::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x02 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
             );
             TO_CLIENT.registerPacket(
@@ -483,6 +576,16 @@ public enum Protocol
             return supportsForge || i >= 0 && i <= MAX_PACKET_ID;
         }
 
+        // Waterdog start
+        public boolean hasPacket(Class<? extends DefinedPacket> packet, int version) {
+            ProtocolData protocol = protocols.get( version );
+            if (protocol == null) {
+                return false;
+            }
+            return protocol.packetMap.containsKey(packet);
+        }
+        // Waterdog end
+
         public final DefinedPacket createPacket(int id, int version)
         {
             return createPacket(id, version, true);
@@ -497,6 +600,7 @@ public enum Protocol
             }
             if ( !hasPacket(id, supportsForge) )
             {
+                if (ProtocolConstants.isPE(version)) return null; // Waterdog - negative packet ids
                 throw new BadPacketException( "Packet with id " + id + " outside of range " );
             }
 
@@ -523,6 +627,13 @@ public enum Protocol
                 ProtocolMapping mapping = mappings[mappingIndex];
                 for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
                 {
+                    // Waterdog start - dont carry pe mappings into pc
+                    while (protocol > 0 && mapping.protocolVersion < 0) {
+                        if (mappingIndex + 1 < mappings.length) mapping = mappings[++mappingIndex];
+                        else return;
+                    }
+                    // Waterdog end
+
                     if ( protocol < mapping.protocolVersion )
                     {
                         // This is a new packet, skip it till we reach the next protocol
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index cd987c8a..b9845387 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -6,6 +6,20 @@ import java.util.List;
 public class ProtocolConstants
 {
 
+    // Waterdog start
+    public static final int PE_PROTOCOL_OFFSET = 2000;
+    public static final int MINECRAFT_PE_1_8 = 313 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_9 = 332 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_10 = 340 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_11 = 354 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_12 = 361 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_13 = 388 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_14 = 389 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_14_HOTFIX = 390 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_15 = 392 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_16 = 407 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_16_20 = 408 - PE_PROTOCOL_OFFSET;
+    // Waterdog end
     public static final int MINECRAFT_1_8 = 47;
     public static final int MINECRAFT_1_9 = 107;
     public static final int MINECRAFT_1_9_1 = 108;
@@ -29,6 +43,17 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_15_1 = 575;
     public static final int MINECRAFT_1_15_2 = 578;
     public static final List<String> SUPPORTED_VERSIONS = Arrays.asList(
+            // Waterdog start
+            "PE-1.8.x",
+            "PE-1.9.x",
+            "PE-1.10.x",
+            "PE-1.11.x",
+            "PE-1.12.x",
+            "PE-1.13.x",
+            "PE-1.14.x",
+            "PE-1.15.x",
+            "PE-1.16.x",
+            // Waterdog end
             "1.8.x",
             "1.9.x",
             "1.10.x",
@@ -39,6 +64,19 @@ public class ProtocolConstants
             "1.15.x"
     );
     public static final List<Integer> SUPPORTED_VERSION_IDS = Arrays.asList(
+            // Waterdog start
+            ProtocolConstants.MINECRAFT_PE_1_8,
+            ProtocolConstants.MINECRAFT_PE_1_9,
+            ProtocolConstants.MINECRAFT_PE_1_10,
+            ProtocolConstants.MINECRAFT_PE_1_11,
+            ProtocolConstants.MINECRAFT_PE_1_12,
+            ProtocolConstants.MINECRAFT_PE_1_13,
+            ProtocolConstants.MINECRAFT_PE_1_14,
+            ProtocolConstants.MINECRAFT_PE_1_14_HOTFIX,
+            ProtocolConstants.MINECRAFT_PE_1_15,
+            ProtocolConstants.MINECRAFT_PE_1_16,
+            ProtocolConstants.MINECRAFT_PE_1_16_20,
+            // Waterdog end
             ProtocolConstants.MINECRAFT_1_8,
             ProtocolConstants.MINECRAFT_1_9,
             ProtocolConstants.MINECRAFT_1_9_1,
@@ -65,14 +103,22 @@ public class ProtocolConstants
 
     public static final boolean isBeforeOrEq(int before, int other)
     {
+            if (isPE(before) != isPE(other)) return false; // Waterdog - no compare PE
             return before <= other;
     }
 
     public static final boolean isAfterOrEq(int after, int other)
     {
+            if (isPE(after) != isPE(other)) return false; // Waterdog - no compare PE
             return after >= other;
     }
 
+    // Waterdog start
+    public static final boolean isPE(int v) {
+        return v < -1;
+    }
+    // Waterdog end
+
     public enum Direction
     {
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
index a26fba6e..fec892ec 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
@@ -32,6 +32,64 @@ public class BossBar extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            uuid = new UUID(0, readSVarLong(buf));
+            final int peAction = readVarInt(buf);
+            try {
+                title = "";
+                health = 1.0f;
+                color = 5;
+                division = 0;
+                switch (peAction) {
+                    // Add
+                    case 0:
+                        action = 0;
+                        title = readString(buf);
+                        health = buf.readFloatLE();
+                        buf.readShortLE(); // darken screen
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                    // Remove
+                    case 2:
+                        action = 1;
+                        break;
+                    // Player add
+                    case 1:
+                        // Player remove
+                    case 3:
+                        action = peAction == 1 ? 6 : 7;
+                        readVarInt(buf); // player id
+                        break;
+                    // Health
+                    case 4:
+                        action = 2;
+                        health = buf.readFloatLE();
+                        break;
+                    // Title
+                    case 5:
+                        action = 3;
+                        title = readString(buf);
+                        break;
+                    // Flags
+                    case 6:
+                        action = 5;
+                        buf.readShortLE(); // darken screen
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                    // Style
+                    case 7:
+                        action = 4;
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                }
+            } catch (IndexOutOfBoundsException e) {} //Support truncated format too
+            return;
+        }
+        // Waterdog end
         uuid = readUUID( buf );
         action = readVarInt( buf );
 
@@ -68,6 +126,59 @@ public class BossBar extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarLong(uuid.getLeastSignificantBits(), buf);
+            switch (action) {
+                // Add
+                case 0:
+                    writeVarInt(0, buf);
+                    writeString(title, buf);
+                    buf.writeFloatLE(health);
+                    buf.writeShortLE(12); // darken
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Remove
+                case 1:
+                    writeVarInt(2, buf);
+                    break;
+                // Health
+                case 2:
+                    writeVarInt(4, buf);
+                    buf.writeFloatLE(health);
+                    break;
+                // Title
+                case 3:
+                    writeVarInt(5, buf);
+                    writeString(title, buf);
+                    break;
+                // Style
+                case 4:
+                    writeVarInt(7, buf);
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Flags
+                case 5:
+                    writeVarInt(6, buf);
+                    buf.writeShortLE(12); // darken
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Player add
+                case 6:
+                // Player remove
+                case 7:
+                    writeVarInt(action == 6 ? 1 : 3, buf);
+                    writeVarInt(0, buf); // player id
+                    break;
+                default:
+                    writeVarInt(action, buf);
+            }
+            return;
+        }
+        // Waterdog end
         writeUUID( uuid, buf );
         writeVarInt( action, buf );
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
index 0ded6739..4485e26f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
@@ -15,7 +15,6 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @EqualsAndHashCode(callSuper = false)
 public class Chat extends DefinedPacket
 {
-
     private String message;
     private byte position;
 
@@ -27,6 +26,20 @@ public class Chat extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            position = (byte) network.ycc.waterdog.pe.PEDataValues.getPcChatType(buf.readUnsignedByte());
+            buf.readBoolean(); //needs translation
+            if (direction == ProtocolConstants.Direction.TO_SERVER) {
+                readString(buf); //sender
+                message = readString(buf);
+            } else {
+                message = net.md_5.bungee.chat.ComponentSerializer.toString(net.md_5.bungee.api.chat.TextComponent.fromLegacyText(readString(buf)));
+            }
+            buf.skipBytes(buf.readableBytes());
+            return;
+        }
+        // Waterdog end
         // Waterfall start
         if (direction == ProtocolConstants.Direction.TO_CLIENT) {
             this.message = readString(buf, Short.MAX_VALUE * 8 + 8);
@@ -42,6 +55,21 @@ public class Chat extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeByte(network.ycc.waterdog.pe.PEDataValues.getPeChatType(position, direction));
+            buf.writeBoolean(false);
+            if (direction == ProtocolConstants.Direction.TO_SERVER) {
+                writeString("", buf); //sender
+                writeString(message, buf);
+            } else {
+                writeString(net.md_5.bungee.chat.ComponentSerializer.parse(message)[0].toLegacyText(), buf);
+            }
+            writeString("", buf);
+            writeString("", buf);
+            return;
+        }
+        // Waterdog end
         // Waterfall start
         if (direction == ProtocolConstants.Direction.TO_CLIENT) {
             writeString(this.message, Short.MAX_VALUE * 8 + 8, buf);
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
index 9daf7a73..49d13a34 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
@@ -27,6 +27,13 @@ public class ClientSettings extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            viewDistance = (byte) readSVarInt(buf);
+            locale = "";
+            return;
+        }
+        // Waterdog end
         locale = readString( buf );
         viewDistance = buf.readByte();
         chatFlags = protocolVersion >= ProtocolConstants.MINECRAFT_1_9 ? DefinedPacket.readVarInt( buf ) : buf.readUnsignedByte();
@@ -41,6 +48,12 @@ public class ClientSettings extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarInt(viewDistance, buf);
+            return;
+        }
+        // Waterdog end
         writeString( locale, buf );
         buf.writeByte( viewDistance );
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
index b004bc41..2caa02eb 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
@@ -21,12 +21,19 @@ public class KeepAlive extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start - empty keepalive
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            buf.skipBytes(buf.readableBytes());
+            return;
+        }
+        // Waterdog end
         randomId = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 ) ? buf.readLong() : readVarInt( buf );
     }
 
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        if (ProtocolConstants.isPE(protocolVersion)) return; // Waterdog - empty keepalive
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 )
         {
             buf.writeLong( randomId );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
index 3976d91c..25cc4b68 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
@@ -18,14 +18,32 @@ public class Kick extends DefinedPacket
     private String message;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.readBoolean(); //hide disconnect screen
+            message = net.md_5.bungee.chat.ComponentSerializer.toString(new net.md_5.bungee.api.chat.TextComponent(readString(buf)));
+            return;
+        }
+        // Waterdog end
         message = readString( buf );
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeBoolean( false ); // hide disconnect screen
+            String disconnectText = net.md_5.bungee.chat.ComponentSerializer.parse(message)[0].toLegacyText();
+            if (disconnectText.startsWith("§f")) {
+                disconnectText = disconnectText.substring(2);
+            }
+            writeString(disconnectText, buf);
+            return;
+        }
+        // Waterdog end
         writeString( message, buf );
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index 2aa5ad58..e783eb46 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -14,22 +14,47 @@ import net.md_5.bungee.protocol.DefinedPacket;
 @EqualsAndHashCode(callSuper = false)
 public class LoginSuccess extends DefinedPacket
 {
+    // Waterdog start
+    public static final int PE_LOGIN_SUCCESS = 0;
+    public static final int PE_LOGIN_FAILED_CLIENT = 1;
+    public static final int PE_LOGIN_FAILED_SERVER = 2;
+    public static final int PE_PLAYER_SPAWN = 3;
+
+    private int statusCode = PE_LOGIN_SUCCESS;
+
+    public LoginSuccess(String uuid, String username) {
+        this.uuid = uuid;
+        this.username = username;
+    }
+    // Waterdog end
 
     private String uuid;
     private String username;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
-        uuid = readString( buf );
-        username = readString( buf );
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            statusCode = buf.readInt();
+            return;
+        }
+        // Waterdog end
+        uuid = readString(buf);
+        username = readString(buf);
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
-        writeString( uuid, buf );
-        writeString( username, buf );
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeInt(statusCode);
+            return;
+        }
+        // Waterdog end
+        writeString(uuid, buf);
+        writeString(username, buf);
     }
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
index 17e12655..421fac14 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
@@ -82,7 +82,8 @@ public class PluginMessage extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( readString( buf ) ) : readString( buf );
+        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) ) ? MODERNISE.apply( readString( buf ) ) : readString( buf ); // Waterdog
+        if (ProtocolConstants.isPE(protocolVersion) && buf.isReadable()) buf = buf.readSlice(readVarInt(buf)); // Waterdog - varint slice
         int maxSize = direction == ProtocolConstants.Direction.TO_SERVER ? Short.MAX_VALUE : 0x100000;
         Preconditions.checkArgument( buf.readableBytes() < maxSize );
         data = new byte[ buf.readableBytes() ];
@@ -92,7 +93,8 @@ public class PluginMessage extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        writeString( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( tag ) : tag, buf );
+        writeString( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) ) ? MODERNISE.apply( tag ) : tag, buf ); // Waterdog
+        if (ProtocolConstants.isPE(protocolVersion)) writeVarInt(data.length, buf); // Waterdog - varint lengths
         buf.writeBytes( data );
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
index 1f544f26..b05c03ba 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
@@ -25,6 +25,16 @@ public class Respawn extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            dimension = network.ycc.waterdog.pe.PEDataValues.getPcDimensionId(readSVarInt(buf));
+            buf.readFloatLE(); //x
+            buf.readFloatLE(); //y
+            buf.readFloatLE(); //z
+            buf.readBoolean(); //respawn
+            return;
+        }
+        // Waterdog end
         dimension = buf.readInt();
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
@@ -41,6 +51,16 @@ public class Respawn extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarInt(network.ycc.waterdog.pe.PEDataValues.getPeDimensionId(dimension), buf);
+            buf.writeFloatLE(0); //x
+            buf.writeFloatLE(300); //y
+            buf.writeFloatLE(0); //z
+            buf.writeBoolean(true); //respawn
+            return;
+        }
+        // Waterdog end
         buf.writeInt( dimension );
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
         {
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
index 6ef76ea2..5dee53dd 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
@@ -139,6 +139,7 @@ public abstract class PEBlockRewrite {
 
     protected void rewriteChunkSections(ByteBuf in, ByteBuf out, int sections) {
         for (int section = 0 ; section < sections ; section++) {
+            boolean notSupported = false;
             final int subchunkVersion = in.readUnsignedByte();
             out.writeByte(subchunkVersion);
             switch (subchunkVersion) {
@@ -151,11 +152,17 @@ public abstract class PEBlockRewrite {
                     rewriteV8ChunkSection(in, out);
                     break;
                 default: //unsupported
-                    throw new IllegalArgumentException("Unknown subchunk format " + subchunkVersion);
+                    //TODO: erm, what changed here?
+                    //throw new IllegalArgumentException("Unknown subchunk format " + subchunkVersion);
+                    notSupported = true;
+                    System.out.println("PEBlockRewrite: Unknown subchunk format " + subchunkVersion);
+                    break;
+            }
+            if (notSupported) {
+                break;
             }
         }
-        out.writeBytes(in, 512); //heightmap
-        out.writeBytes(in, 256); //biomedata
+        out.writeBytes(in); //copy the rest
     }
 
     protected void rewriteV8ChunkSection(ByteBuf in, ByteBuf out) {
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java b/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java
index 55ca27bd..88074783 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java
@@ -9,6 +9,7 @@ import io.netty.channel.Channel;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
+import java.util.Map;
 import java.util.UUID;
 
 public class PERawPacketData {
@@ -173,4 +174,24 @@ public class PERawPacketData {
         channel.write(removeEntityEffect);
     }
 
+    public static void injectSetGameRule(Channel channel, final Map<String, Object> rules){
+        final ByteBuf gameRulePacket = channel.alloc().ioBuffer();
+        DefinedPacket.writeVarInt(0x48, gameRulePacket); //GAME_RULES_CHANGED_PACKET
+        DefinedPacket.writeVarInt(rules.size(), gameRulePacket);
+        rules.forEach((String rule, Object value)->{
+            DefinedPacket.writeString(rule, gameRulePacket);
+
+            if (value instanceof Byte){
+                DefinedPacket.writeVarInt(1, gameRulePacket);
+                gameRulePacket.writeByte((byte) value);
+            }else if (value instanceof Integer){
+                DefinedPacket.writeVarInt(2, gameRulePacket);
+                DefinedPacket.writeSVarInt((int) value, gameRulePacket);
+            }else if (value instanceof Float){
+                DefinedPacket.writeVarInt(3, gameRulePacket);
+                gameRulePacket.writeFloatLE((float) value);
+            }
+        });
+        channel.write(gameRulePacket);
+    }
 }
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java
index 15eff8e8..fb41d58a 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java
@@ -1,8 +1,6 @@
 package network.ycc.waterdog.pe.packet;
 
-import com.nukkitx.nbt.stream.NBTInputStream;
-import com.nukkitx.nbt.stream.NetworkDataInputStream;
-
+import com.nukkitx.nbt.NbtUtils;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;
 
@@ -17,6 +15,8 @@ import net.md_5.bungee.protocol.packet.Login;
 import network.ycc.waterdog.pe.PEDataValues;
 
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 @Data
 @NoArgsConstructor
@@ -28,6 +30,7 @@ public class PELogin extends Login {
     private byte[] tailPayload;
     private int payloadPaletteOffset; //offset of tailPayload for the palette
     private int payloadPaletteLength;
+    private Map<String, Object> rules = new HashMap<>();
 
     public PELogin(int entityId, short gameMode, int dimension, short difficulty, short maxPlayers, String levelType, int viewDistance, boolean reducedDebugInfo, byte[] tailPayload) {
         super(entityId, gameMode, dimension, 0, difficulty, maxPlayers, levelType, viewDistance, reducedDebugInfo, true);
@@ -84,27 +87,30 @@ public class PELogin extends Login {
         }
         buf.readBoolean(); //commands enabled
         buf.readBoolean(); //needs texture pack
-        
+
         final int nGameRules = DefinedPacket.readVarInt(buf); //game rules
         for (int i = 0 ; i < nGameRules ; i++) {
-            DefinedPacket.readString(buf);
+            String rule = DefinedPacket.readString(buf);
+            Object value;
+
             final int grType = DefinedPacket.readVarInt(buf);
             switch (grType) {
                 case 1: {
-                    buf.readByte();
+                    value = buf.readByte();
                     break;
                 }
                 case 2: {
-                    DefinedPacket.readSVarInt(buf);
+                    value = DefinedPacket.readSVarInt(buf);
                     break;
                 }
                 case 3: {
-                    buf.readFloatLE();
+                    value = buf.readFloatLE();
                     break;
                 }
                 default:
                     throw new IllegalArgumentException("Unknown game rule type " + grType);
             }
+            rules.put(rule, value);
         }
 
         buf.readBoolean(); //bonus chest
@@ -154,7 +158,7 @@ public class PELogin extends Login {
             final int paletteStart = buf.readerIndex();
             try {
                 final ByteBufInputStream is = new ByteBufInputStream(buf);
-                new NBTInputStream(new NetworkDataInputStream(is)).readTag();
+                NbtUtils.createNetworkReader(is).readTag();
             } catch (IOException e) {
                 throw new IllegalArgumentException("Failed to parse palette NBT", e);
             }
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
index dab227a1..12b52465 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
@@ -19,7 +19,8 @@ public class PEStopSoundPacket extends DefinedPacket {
 
     @Override
     public void read( ByteBuf buf ) {
-        //Ignore
+        name = readString(buf);
+        stopAll = buf.readBoolean();
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 25ddd9ff..d1296368 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -246,6 +246,7 @@ public class BungeeCord extends ProxyServer
                 logger.info( "Using standard Java compressor." );
             }
         }
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.load(logger); // Waterdog
     }
 
     /**
@@ -346,6 +347,7 @@ public class BungeeCord extends ProxyServer
                     }
                 }
             };
+            if ( !info.isRakNet() ) { // Waterdog
             new ServerBootstrap()
                     .channel( PipelineUtils.getServerChannel( info.getSocketAddress() ) )
                     .option( ChannelOption.SO_REUSEADDR, true ) // TODO: Move this elsewhere!
@@ -354,8 +356,23 @@ public class BungeeCord extends ProxyServer
                     .group( bossEventLoopGroup, workerEventLoopGroup )
                     .localAddress( info.getSocketAddress() )
                     .bind().addListener( listener );
+            // Waterdog start
+            } else {
+                network.ycc.waterdog.pe.PEPipelineUtils.multiServerBootstrap(listener, getLogger(), () ->
+                    new ServerBootstrap()
+                    .channelFactory(() -> new network.ycc.raknet.server.channel.RakNetServerChannel(PipelineUtils.getDatagramChannel()))
+                    .option(network.ycc.raknet.RakNet.MAX_CONNECTIONS, info.getMaxPlayers())
+                    .option(network.ycc.raknet.RakNet.SERVER_ID, UUID.randomUUID().getMostSignificantBits())
+                    .childAttr(PipelineUtils.LISTENER, info)
+                    .handler(new network.ycc.waterdog.pe.PEPipelineUtils.ServerChannel(this, info))
+                    .childHandler(network.ycc.waterdog.pe.PEPipelineUtils.SERVER_CHILD)
+                    .group(bossEventLoopGroup, workerEventLoopGroup)
+                    .localAddress(info.getHost())
+                );
+            }
+            // Waterdog end
 
-            if ( info.isQueryEnabled() )
+            if ( info.needsRealQuery() ) // Waterdog
             {
                 Preconditions.checkArgument( info.getSocketAddress() instanceof InetSocketAddress, "Can only create query listener on UDP address" );
 
@@ -673,7 +690,7 @@ public class BungeeCord extends ProxyServer
 
     public PluginMessage registerChannels(int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) )
         {
             return new PluginMessage( "minecraft:register", Util.format( Iterables.transform( pluginChannels, PluginMessage.MODERNISE ), "\00" ).getBytes( Charsets.UTF_8 ), false );
         }
@@ -693,16 +710,18 @@ public class BungeeCord extends ProxyServer
         return getConfig().getGameVersion(); // Waterfall
     }
 
+    // Waterdog start
     @Override
-    public ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted)
+    public ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted)
     {
-        return constructServerInfo( name, (SocketAddress) address, motd, restricted );
+        return constructServerInfo( name, address, motd, restricted );
     }
+    // Waterdog end
 
     @Override
-    public ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted)
+    public ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted, boolean isRakNet, String transferGroup) // Waterdog
     {
-        return new BungeeServerInfo( name, address, motd, restricted );
+        return new BungeeServerInfo( name, address, motd, restricted, isRakNet, transferGroup ); // Waterdog
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index d9497970..3eda0a37 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -58,7 +58,14 @@ public class BungeeCordLauncher
 
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
-        bungee.getLogger().info( "Enabled Waterfall version " + bungee.getVersion() );
+        // Waterdog start
+        bungee.getLogger().info( ChatColor.AQUA + "Starting "+VersionInfo.SOFTWARE+" proxy software!");
+        bungee.getLogger().info( ChatColor.DARK_AQUA + "Software Version: "+VersionInfo.VERSION);
+        bungee.getLogger().info( ChatColor.DARK_AQUA + "Build Version: "+VersionInfo.JENKINS_BUILD_ID);
+        bungee.getLogger().info( ChatColor.DARK_AQUA + "Raw Version: "+bungee.getVersion());
+        bungee.getLogger().info( ChatColor.DARK_AQUA + "Development Build: "+VersionInfo.IS_DEVELOPMENT_BUILD);
+        bungee.getLogger().info( ChatColor.DARK_AQUA + "Software Authors: "+VersionInfo.AUTHORS);
+        // Waterdog end
         bungee.start();
 
         if ( !options.has( "noconsole" ) )
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 7b002089..ea0f4d5c 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -36,6 +36,7 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 @ToString(of =
 {
     "name", "socketAddress", "restricted"
+    , "raknet", "transferGroup" // Waterdog
 })
 // CHECKSTYLE:ON
 public class BungeeServerInfo implements ServerInfo
@@ -53,6 +54,26 @@ public class BungeeServerInfo implements ServerInfo
     @Getter
     private final Queue<DefinedPacket> packetQueue = new LinkedList<>();
 
+    // Waterdog start
+    public BungeeServerInfo(String name, SocketAddress socketAddress, String motd, boolean restricted) {
+        this.name = name;
+        this.socketAddress = socketAddress;
+        this.motd = motd;
+        this.restricted = restricted;
+        this.rakNet = true;
+        this.transferGroup = "default";
+    }
+
+    public BungeeServerInfo(String name, InetSocketAddress socketAddress, String motd, boolean restricted) {
+        this(name, (SocketAddress)socketAddress, motd, restricted);
+    }
+
+    @Getter
+    private final boolean rakNet;
+    @Getter
+    private final String transferGroup;
+    // Waterdog end
+
     @Synchronized("players")
     public void addPlayer(ProxiedPlayer player)
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 35a19224..2ca549ae 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -54,6 +54,8 @@ import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.ViewDistance;
 import net.md_5.bungee.util.BufUtil;
 import net.md_5.bungee.util.QuietException;
+import network.ycc.waterdog.pe.packet.PEHandshake;
+import network.ycc.waterdog.pe.packet.PELogin;
 
 @RequiredArgsConstructor
 public class ServerConnector extends PacketHandler
@@ -101,7 +103,15 @@ public class ServerConnector extends PacketHandler
         Handshake originalHandshake = user.getPendingConnection().getHandshake();
         Handshake copiedHandshake = new Handshake( originalHandshake.getProtocolVersion(), originalHandshake.getHost(), originalHandshake.getPort(), 2 );
 
-        if ( BungeeCord.getInstance().config.isIpForward() && user.getSocketAddress() instanceof InetSocketAddress )
+        // Waterdog start - PE handshake
+        if (originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.packet.PEHandshake oPEHandshake = (network.ycc.waterdog.pe.packet.PEHandshake) originalHandshake;
+            copiedHandshake = new network.ycc.waterdog.pe.packet.PEHandshake( originalHandshake.getProtocolVersion(),
+                    originalHandshake.getHost(), originalHandshake.getPort(), user.getName(), user.getUniqueId(),
+                    oPEHandshake.isAuthorized(), oPEHandshake.getClientInfo(), oPEHandshake.getXuid() );
+        }
+        // Waterdog end
+        if ( BungeeCord.getInstance().config.isIpForward() && user.getSocketAddress() instanceof InetSocketAddress && !target.isRakNet()) // Waterdog
         {
             String newHost = copiedHandshake.getHost() + "\00" + user.getAddress().getHostString() + "\00" + user.getUUID();
 
@@ -142,9 +152,16 @@ public class ServerConnector extends PacketHandler
             copiedHandshake.setHost( copiedHandshake.getHost() + user.getExtraDataInHandshake() );
         }
 
+        // Waterdog start - PE handshake
+        if (originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.PEEncryptionUtils.createHandshake((PEHandshake) copiedHandshake);
+        }
+        // Waterdog end
+
         channel.write( copiedHandshake );
 
         channel.setProtocol( Protocol.LOGIN );
+        if (!(originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake)) // Waterdog - no LoginRequest for PE
         channel.write( new LoginRequest( user.getName() ) );
     }
 
@@ -159,6 +176,12 @@ public class ServerConnector extends PacketHandler
     {
         if ( packet.packet == null )
         {
+            // Waterdog start - handle inventory data sent before Login
+            if (ProtocolConstants.isPE(user.getPendingConnection().getVersion())) {
+                user.sendPacket(packet);
+                return;
+            }
+            // Waterdog end
             throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump( packet.buf, 16 ) );
         }
     }
@@ -166,6 +189,15 @@ public class ServerConnector extends PacketHandler
     @Override
     public void handle(LoginSuccess loginSuccess) throws Exception
     {
+        // Waterdog start
+        if (loginSuccess.getStatusCode() == LoginSuccess.PE_LOGIN_FAILED_CLIENT) {
+            handle(new Kick("disconnectionScreen.outdatedClient"));
+            throw CancelSendSignal.INSTANCE;
+        } else if (loginSuccess.getStatusCode() == LoginSuccess.PE_LOGIN_FAILED_SERVER) {
+            handle(new Kick("disconnectionScreen.outdatedServer"));
+            throw CancelSendSignal.INSTANCE;
+        }
+        // Waterdog end
         Preconditions.checkState( thisState == State.LOGIN_SUCCESS, "Not expecting LOGIN_SUCCESS" );
         ch.setProtocol( Protocol.GAME );
         thisState = State.LOGIN;
@@ -198,6 +230,30 @@ public class ServerConnector extends PacketHandler
         ch.setCompressionThreshold( setCompression.getThreshold() );
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePack resourcePack) throws Exception
+    {
+        ch.write(new network.ycc.waterdog.pe.packet.PEResourcePackResponse(network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_HAVE_ALL_PACKS));
+        throw CancelSendSignal.INSTANCE;
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourceStack resourceStack) throws Exception
+    {
+        ch.write(new network.ycc.waterdog.pe.packet.PEResourcePackResponse(network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_COMPLETED));
+        throw CancelSendSignal.INSTANCE;
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionRequest request) throws Exception
+    {
+        ch.getHandle().pipeline().addLast(new network.ycc.waterdog.pe.PEEncryptionInitializer(request));
+        ch.write(new network.ycc.waterdog.pe.packet.PEEncryptionResponse());
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
     @Override
     public void handle(Login login) throws Exception
     {
@@ -213,7 +269,10 @@ public class ServerConnector extends PacketHandler
 
         bungee.getPluginManager().callEvent( event );
 
-        ch.write( BungeeCord.getInstance().registerChannels( user.getPendingConnection().getVersion() ) );
+        if (!(login instanceof network.ycc.waterdog.pe.packet.PELogin)){
+            ch.write(BungeeCord.getInstance().registerChannels( user.getPendingConnection().getVersion() ));
+        }
+
         Queue<DefinedPacket> packetQueue = target.getPacketQueue();
         synchronized ( packetQueue )
         {
@@ -223,9 +282,10 @@ public class ServerConnector extends PacketHandler
             }
         }
 
-        for ( PluginMessage message : user.getPendingConnection().getRelayMessages() )
-        {
-            ch.write( message );
+        if (!(login instanceof network.ycc.waterdog.pe.packet.PELogin)){
+            for (PluginMessage message : user.getPendingConnection().getRelayMessages()){
+                ch.write( message );
+            }
         }
 
         if (!user.isDisableEntityMetadataRewrite() && user.getSettings() != null )
@@ -248,6 +308,31 @@ public class ServerConnector extends PacketHandler
             Login modLogin = new Login( login.getEntityId(), login.getGameMode(), (byte) login.getDimension(), login.getSeed(), login.getDifficulty(),
                     (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn() );
 
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                network.ycc.waterdog.pe.packet.PELogin peLogin = (network.ycc.waterdog.pe.packet.PELogin) login;
+
+                // TODO: version support check
+
+                modLogin = new network.ycc.waterdog.pe.packet.PELogin( login.getEntityId(),
+                        login.getGameMode(), (byte) login.getDimension(), login.getDifficulty(),
+                        (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(),
+                        login.getViewDistance(), login.isReducedDebugInfo(), peLogin.getTailPayload() );
+
+                ByteBuf paletteData = io.netty.buffer.Unpooled.wrappedBuffer(peLogin.getTailPayload())
+                        .skipBytes(peLogin.getPayloadPaletteOffset())
+                        .readSlice(peLogin.getPayloadPaletteLength());
+
+                network.ycc.waterdog.pe.PEBlockPalette palette = network.ycc.waterdog.pe.PEBlockPalette.get(
+                        paletteData, user.getPendingConnection().getVersion());
+
+                user.setClientBlockPalette(palette);
+                user.setBlockRewrite(palette.createRewrite(palette));
+
+                peLogin.setTailPayload(null); //save heap space
+            }
+            // Waterdog end
+
             user.unsafe().sendPacket( modLogin );
 
             ByteBuf brand = ByteBufAllocator.DEFAULT.heapBuffer();
@@ -262,6 +347,13 @@ public class ServerConnector extends PacketHandler
             user.getTabListHandler().onServerChange();
 
             Scoreboard serverScoreboard = user.getServerSentScoreboard();
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                for ( Objective objective : serverScoreboard.getObjectives() ) {
+                    user.unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PERemoveObjectivePacket(objective.getName()));
+                }
+            } else
+            // Waterdog end
             if ( !user.isDisableEntityMetadataRewrite() ) { // Waterfall
             for ( Objective objective : serverScoreboard.getObjectives() )
             {
@@ -328,6 +420,40 @@ public class ServerConnector extends PacketHandler
             }
             user.setDimension( login.getDimension() );
 
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                final network.ycc.waterdog.pe.packet.PELogin peLogin = (network.ycc.waterdog.pe.packet.PELogin) login;
+
+                network.ycc.waterdog.pe.PERawPacketData.injectChunkPublisherUpdate(user.getCh().getHandle(),
+                        (int) peLogin.getSpawnX(), (int) peLogin.getSpawnY(), (int) peLogin.getSpawnZ());
+                network.ycc.waterdog.pe.PERawPacketData.injectGameMode(user.getCh().getHandle(), login.getGameMode());
+
+                server.unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PELocalPlayerInitialized(login.getEntityId()));
+
+                ByteBuf paletteData = io.netty.buffer.Unpooled.wrappedBuffer(peLogin.getTailPayload())
+                        .skipBytes(peLogin.getPayloadPaletteOffset())
+                        .readSlice(peLogin.getPayloadPaletteLength());
+
+                network.ycc.waterdog.pe.PEBlockPalette palette = network.ycc.waterdog.pe.PEBlockPalette.get(
+                        paletteData, user.getPendingConnection().getVersion());
+                user.setBlockRewrite(palette.createRewrite(user.getClientBlockPalette()));
+
+                java.util.Collection<java.util.UUID> playerList = user.getPePlayerList();
+                playerList.forEach(uuid ->
+                        network.ycc.waterdog.pe.PERawPacketData.injectRemovePlayerList(user.getCh().getHandle(), uuid));
+
+                it.unimi.dsi.fastutil.longs.LongSet entityIDs = user.getEntityIDs();
+                entityIDs.forEach((java.util.function.LongConsumer) id ->
+                        network.ycc.waterdog.pe.PERawPacketData.injectRemoveEntity(user.getCh().getHandle(), id));
+                entityIDs.clear();
+
+                user.unsafe().sendPacket( new network.ycc.waterdog.pe.packet.PEStopSoundPacket( "portal.travel", true ) );
+
+                network.ycc.waterdog.pe.PERawPacketData.injectRemoveAllEffects(user.getCh().getHandle(), user.getClientEntityId());
+                network.ycc.waterdog.pe.PERawPacketData.injectSetGameRule(user.getCh().getHandle(), ((PELogin) login).getRules());
+            }
+            // Waterdog end
+
             // Remove from old servers
             user.getServer().disconnect( "Quitting" );
         }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 7c129221..24302eb6 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -65,6 +65,7 @@ import net.md_5.bungee.tab.ServerUnique;
 import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
+import network.ycc.raknet.RakNet;
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -130,6 +131,18 @@ public final class UserConnection implements ProxiedPlayer
     @Getter
     private final Multimap<Integer, Integer> potions = HashMultimap.create();
     // Waterfall end
+    // Waterdog start
+    @Getter
+    @Setter
+    private network.ycc.waterdog.pe.PEBlockPalette clientBlockPalette;
+    @Getter
+    @Setter
+    private network.ycc.waterdog.pe.PEBlockRewrite blockRewrite;
+    @Getter
+    private final it.unimi.dsi.fastutil.longs.LongSet entityIDs = new it.unimi.dsi.fastutil.longs.LongOpenHashSet();
+    @Getter
+    private final Collection<UUID> pePlayerList = new HashSet<>();
+    // Waterdog end
     /*========================================================================*/
     @Getter
     private String displayName;
@@ -144,12 +157,21 @@ public final class UserConnection implements ProxiedPlayer
     @Setter
     private ForgeServerHandler forgeServerHandler;
     /*========================================================================*/
-    private final Unsafe unsafe = new Unsafe()
-    {
+    private final Unsafe unsafe = new Unsafe(){
         @Override
-        public void sendPacket(DefinedPacket packet)
-        {
+        public void sendPacket(DefinedPacket packet) {
+            if ((packet instanceof PluginMessage) && net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())){
+                return;
+            }
+
             ch.write( packet );
+            // Waterdog start
+            if (packet instanceof net.md_5.bungee.protocol.packet.Respawn &&
+                    net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) {
+                // TODO: find a better place for this
+                network.ycc.waterdog.pe.PERawPacketData.injectForcedDimChange(ch.getHandle(), getPendingConnection().getVersion());
+            }
+            // Waterdog end
         }
     };
 
@@ -334,6 +356,17 @@ public final class UserConnection implements ProxiedPlayer
             return;
         }
 
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion()) && getServer() != null
+                && !getServer().getInfo().getTransferGroup().equals(target.getTransferGroup())) {
+            reconnectServer = request.getTarget();
+            InetSocketAddress vHost = getPendingConnection().getVirtualHost();
+            unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PETransfer(vHost.getHostString(), vHost.getPort()));
+            disconnect("PE Server Transfer");
+            return;
+        }
+        // Waterdog end
+
         pendingConnects.add( target );
 
         ChannelInitializer initializer = new ChannelInitializer()
@@ -341,10 +374,29 @@ public final class UserConnection implements ProxiedPlayer
             @Override
             protected void initChannel(Channel ch) throws Exception
             {
+                // Waterdog start
+                if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) {
+                    if (!target.isRakNet()) {
+                        ch.pipeline().addLast(new protocolsupport.protocol.connection.PSInitEncapsulation(getAddress(), false));
+                    } else {
+                        ch.pipeline()
+                        .addLast(network.ycc.raknet.pipeline.UserDataCodec.NAME, network.ycc.waterdog.pe.PEPipelineUtils.MC_USER_DATA_CODEC)
+                        .addLast(network.ycc.waterdog.pe.PECompressor.NAME, new network.ycc.waterdog.pe.PECompressor())
+                        .addLast(network.ycc.waterdog.pe.PEDecompressor.NAME, new network.ycc.waterdog.pe.PEDecompressor());
+                        network.ycc.waterdog.pe.PEPipelineUtils.moveTimeout(ch);
+                    }
+                }
+                // Waterdog end
                 PipelineUtils.BASE.initChannel( ch );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
+                // Waterdog start
+                if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion()) && target.isRakNet()) {
+                    ch.pipeline().replace(PipelineUtils.FRAME_DECODER, PipelineUtils.FRAME_DECODER, new io.netty.channel.ChannelInboundHandlerAdapter());
+                    ch.pipeline().replace(PipelineUtils.FRAME_PREPENDER, PipelineUtils.FRAME_PREPENDER, new io.netty.channel.ChannelInboundHandlerAdapter());
+                }
+                // Waterdog end
             }
         };
         ChannelFutureListener listener = new ChannelFutureListener()
@@ -378,12 +430,27 @@ public final class UserConnection implements ProxiedPlayer
                 }
             }
         };
-        Bootstrap b = new Bootstrap()
+        Bootstrap b; if (!target.isRakNet()) { // Waterdog
+        b = new Bootstrap()
                 .channel( PipelineUtils.getChannel( target.getAddress() ) )
                 .group( ch.getHandle().eventLoop() )
                 .handler( initializer )
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
                 .remoteAddress( target.getAddress() );
+        // Waterdog start
+        } else {
+            final int maxMTU = BungeeCord.getInstance().config.getMaxMTU();
+            b = new Bootstrap()
+                .channelFactory(() -> new network.ycc.raknet.client.channel.RakNetClientChannel(PipelineUtils.getDatagramChannel()))
+                .group(ch.getHandle().eventLoop())
+                .handler( initializer )
+                .option(network.ycc.raknet.RakNet.MTU, maxMTU == -1 ? network.ycc.raknet.config.DefaultConfig.DEFAULT_MTU : maxMTU) //some servers hate large frames
+                .option(RakNet.PROTOCOL_VERSION, (getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_PE_1_16) ? 10 : 9)
+                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout())
+                .remoteAddress(target.getAddress());
+            network.ycc.waterdog.pe.PEPipelineUtils.enableDownstreamScatteredReads(b);
+        }
+        // Waterdog end
         // Windows is bugged, multi homed users will just have to live with random connecting IPs
         if ( getPendingConnection().getListener().isSetLocalAddress() && !PlatformDependent.isWindows() && getPendingConnection().getListener().getSocketAddress() instanceof InetSocketAddress )
         {
@@ -611,7 +678,22 @@ public final class UserConnection implements ProxiedPlayer
     {
         this.settings = settings;
         this.locale = null;
+        // Waterdog start
+        if (pendingConnection != null && pendingConnection.getHandshake() instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            String localString = ((network.ycc.waterdog.pe.packet.PEHandshake) pendingConnection.getHandshake()).getClientInfo().get("LanguageCode").toString();
+            this.locale = Locale.forLanguageTag( localString.replace( '_', '-' ) );
+        }
+        // Waterdog end
+    }
+
+    // Waterdog start
+    public java.math.BigInteger getXUID() {
+        if (pendingConnection != null && pendingConnection.getHandshake() instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            return ((network.ycc.waterdog.pe.packet.PEHandshake) pendingConnection.getHandshake()).getXuid();
+        }
+        return null;
     }
+    // Waterdog end
 
     @Override
     public Locale getLocale()
@@ -726,6 +808,7 @@ public final class UserConnection implements ProxiedPlayer
 
     public void setCompressionThreshold(int compressionThreshold)
     {
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) return; // Waterdog
         if ( !ch.isClosing() && this.compressionThreshold == -1 && compressionThreshold >= 0 )
         {
             this.compressionThreshold = compressionThreshold;
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
index 37fe6ac7..fdb26501 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
@@ -15,6 +15,7 @@ public class PacketDecompressor extends MessageToMessageDecoder<ByteBuf>
 {
 
     private final int compressionThreshold;
+    @Getter(value=AccessLevel.PROTECTED) // Waterdog
     private final BungeeZlib zlib = CompressFactory.zlib.newInstance();
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 85d2197a..6b89352d 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -71,6 +71,13 @@ public abstract class Configuration implements ProxyConfig
     private boolean preventProxyConnections;
     private boolean forgeSupport = true; // Waterfall: default to enabled
 
+    // Waterdog start
+    private boolean replaceUsernameSpaces = true;
+    private boolean useXUIDForUUID = true;
+    private boolean bedrockEncryption = true;
+    private int maxMTU = -1;
+    // Waterdog end
+
     @Synchronized("serversLock") // Waterfall
     public void load()
     {
@@ -105,6 +112,12 @@ public abstract class Configuration implements ProxyConfig
         compressionThreshold = adapter.getInt( "network_compression_threshold", compressionThreshold );
         preventProxyConnections = adapter.getBoolean( "prevent_proxy_connections", preventProxyConnections );
         forgeSupport = adapter.getBoolean( "forge_support", forgeSupport );
+        // Waterdog start
+        replaceUsernameSpaces = adapter.getBoolean( "replace_username_spaces", replaceUsernameSpaces );
+        useXUIDForUUID = adapter.getBoolean( "use_xuid_for_uuid", useXUIDForUUID);
+        bedrockEncryption = adapter.getBoolean( "bedrock_encryption", bedrockEncryption);
+        maxMTU = adapter.getInt( "max_mtu", maxMTU);
+        // Waterdog end
 
         disabledCommands = new CaseInsensitiveSet( (Collection<String>) adapter.getList( "disabled_commands", Arrays.asList( "disabledcommandhere" ) ) );
 
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 65121ba2..76953d79 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -229,8 +229,12 @@ public class YamlConfig implements ConfigurationAdapter
             String addr = get( "address", "localhost:25565", val );
             String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another Waterfall - Forced Host", val ) );
             boolean restricted = get( "restricted", false, val );
+            // Waterdog start
+            boolean isRakNet = get( "raknet", false, val );
+            String transferGroup = get( "transfer_group", "default", val );
+            // Waterdog end
             SocketAddress address = Util.getAddr( addr );
-            ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted );
+            ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted, isRakNet, transferGroup ); // Waterdog
             ret.put( name, info );
         }
 
@@ -244,12 +248,14 @@ public class YamlConfig implements ConfigurationAdapter
     {
         Collection<Map<String, Object>> base = get( "listeners", (Collection) Arrays.asList( new Map[]
         {
+            new HashMap(), // Waterdog
             new HashMap()
         } ) );
         Map<String, String> forcedDef = new HashMap<>();
         forcedDef.put( "pvp.md-5.net", "pvp" );
 
         Collection<ListenerInfo> ret = new HashSet<>();
+        boolean isFirst = true; // Waterdog
 
         for ( Map<String, Object> val : base )
         {
@@ -258,7 +264,7 @@ public class YamlConfig implements ConfigurationAdapter
 
             int maxPlayers = get( "max_players", 1, val );
             boolean forceDefault = get( "force_default_server", false, val );
-            String host = get( "host", "0.0.0.0:25577", val );
+            String host = get( "host", isFirst ? "0.0.0.0:25577" : "0.0.0.0:19132", val ); // Waterdog
             int tabListSize = get( "tab_size", 60, val );
             SocketAddress address = Util.getAddr( host );
             Map<String, String> forced = new CaseInsensitiveMap<>( get( "forced_hosts", forcedDef, val ) );
@@ -271,10 +277,11 @@ public class YamlConfig implements ConfigurationAdapter
             boolean setLocalAddress = get( "bind_local_address", true, val );
             boolean pingPassthrough = get( "ping_passthrough", false, val );
 
-            boolean query = get( "query_enabled", false, val );
-            int queryPort = get( "query_port", 25577, val );
+            boolean query = get( "query_enabled", isFirst ? false : true, val ); // Waterdog
+            int queryPort = get( "query_port", isFirst ? 25577 : 19132, val ); // Waterdog
 
             boolean proxyProtocol = get( "proxy_protocol", false, val );
+            boolean isRakNet = get( "raknet", !isFirst, val ); // Waterdog
             List<String> serverPriority = new ArrayList<>( get( "priorities", Collections.EMPTY_LIST, val ) );
 
             // Default server list migration
@@ -299,8 +306,9 @@ public class YamlConfig implements ConfigurationAdapter
             }
             set( "priorities", serverPriority, val );
 
-            ListenerInfo info = new ListenerInfo( address, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forced, value.toString(), setLocalAddress, pingPassthrough, queryPort, query, proxyProtocol );
+            ListenerInfo info = new ListenerInfo( address, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forced, value.toString(), setLocalAddress, pingPassthrough, queryPort, query, proxyProtocol, isRakNet ); // Waterdog
             ret.add( info );
+            isFirst = false; // Waterdog
         }
 
         return ret;
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index d7d0fafc..afabae45 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -140,6 +140,25 @@ public class DownstreamBridge extends PacketHandler
     public void handle(PacketWrapper packet) throws Exception
     {
         con.getEntityRewrite().rewriteClientbound( packet.buf, con.getServerEntityId(), con.getClientEntityId(), con.getPendingConnection().getVersion() );
+        // Waterdog start
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+            if ((packet.packet instanceof PluginMessage)){
+                return;
+            }
+
+            if (con.getEntityRewrite() instanceof net.md_5.bungee.entitymap.EntityMap_PE) {
+                net.md_5.bungee.entitymap.EntityMap_PE entityMap = (net.md_5.bungee.entitymap.EntityMap_PE) con.getEntityRewrite();
+                it.unimi.dsi.fastutil.longs.LongSet entityIDs = con.getEntityIDs();
+                java.util.Collection<java.util.UUID> playerList = con.getPePlayerList();
+
+                entityMap.entityTrack(packet.buf, entityIDs::add, entityIDs::remove);
+                entityMap.playerListTrackRewrite(packet.buf, playerList::add, playerList::remove,
+                        con.getUniqueId(), con.getPendingConnection().getLoginId());
+            }
+
+            con.getBlockRewrite().rewriteClientbound(packet.buf, con.getPendingConnection().getVersion());
+        }
+        // Waterdog end
         con.sendPacket( packet );
     }
 
@@ -160,6 +179,21 @@ public class DownstreamBridge extends PacketHandler
         throw CancelSendSignal.INSTANCE; // Always throw because of profile rewriting
     }
 
+    // Waterdog start
+    public void handle(network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket setDisplayObjectivePacket) throws Exception
+    {
+        con.getServerSentScoreboard().removeObjective(setDisplayObjectivePacket.getObjectiveName());
+        con.getServerSentScoreboard().addObjective(new Objective(
+                setDisplayObjectivePacket.getObjectiveName(), setDisplayObjectivePacket.getDisplayName(),
+                setDisplayObjectivePacket.getDisplaySlot()));
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PERemoveObjectivePacket removeObjectivePacket) throws Exception
+    {
+        con.getServerSentScoreboard().removeObjective(removeObjectivePacket.getObjectiveName());
+    }
+    // Waterdog end
+
     @Override
     public void handle(ScoreboardObjective objective) throws Exception
     {
@@ -476,6 +510,19 @@ public class DownstreamBridge extends PacketHandler
                     out.writeUTF( player.getUUID() );
                 }
             }
+            // Waterdog start
+            if ( subChannel.equals( "GetPing" ) )
+            {
+                out.writeInt( con.getPing() );
+            }
+            if ( subChannel.equals( "GetPingOther" ) )
+            {
+                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                if ( player != null ) {
+                    out.writeInt(player.getPing());
+                }
+            }
+            // Waterdog end
             if ( subChannel.equals( "ServerIP" ) )
             {
                 ServerInfo info = bungee.getServerInfo( in.readUTF() );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 007d3daf..807f512e 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -99,6 +99,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private UUID uniqueId;
     @Getter
     private UUID offlineId;
+    // Waterdog start
+    @Getter
+    private UUID loginId;
+    // Waterdog end
     @Getter
     private LoginResult loginProfile;
     @Getter
@@ -146,6 +150,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
+            if (true) return; // Waterdog - login garbage TODO: need better filtering
             throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
         }
     }
@@ -293,6 +298,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(Handshake handshake) throws Exception
     {
         Preconditions.checkState( thisState == State.HANDSHAKE, "Not expecting HANDSHAKE" );
+        // Waterdog start - parse handshake
+        if (handshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.PEEncryptionUtils.parseHandshake((network.ycc.waterdog.pe.packet.PEHandshake) handshake);
+        }
+        // Waterdog end
         this.handshake = handshake;
         ch.setVersion( handshake.getProtocolVersion() );
 
@@ -349,6 +359,27 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                     }
                     return;
                 }
+                // Waterdog start - condensed PE handshake
+                if (handshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+                    network.ycc.waterdog.pe.packet.PEHandshake peHandshake = (network.ycc.waterdog.pe.packet.PEHandshake) handshake;
+
+                    uniqueId = peHandshake.getUuid();
+                    loginId = peHandshake.getLoginUUID();
+                    //TODO: loginProfile?
+                    handle(new LoginRequest(peHandshake.getUsername()));
+
+                    peHandshake.getClientInfo().addProperty("WaterDog_RemoteIP", getAddress().getHostString()); //old format, deprecated.
+                    peHandshake.getClientInfo().addProperty("Waterdog_RemoteIP", getAddress().getHostString());
+                    if (peHandshake.getXuid() != null) {
+                        peHandshake.getClientInfo().addProperty("Waterdog_XUID", peHandshake.getXuid().toString());
+                    }
+
+                    if (isOnlineMode() && !peHandshake.isAuthorized()) {
+                        disconnect("disconnectionScreen.notAuthenticated");
+                        break;
+                    }
+                }
+                // Waterdog end
                 break;
             default:
                 throw new IllegalArgumentException( "Cannot request protocol " + handshake.getRequestedProtocol() );
@@ -388,6 +419,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             return;
         }
 
+        // Waterdog start
+        if (ProtocolConstants.isPE(getVersion()) && onlineMode && !((network.ycc.waterdog.pe.packet.PEHandshake) handshake).isAuthorized()) {
+            disconnect( bungee.getTranslation( "offline_mode_player" ) );
+            return;
+        }
+        // Waterdog end
+
         Callback<PreLoginEvent> callback = new Callback<PreLoginEvent>()
         {
 
@@ -403,6 +441,30 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     return;
                 }
+                // Waterdog start
+                if (ProtocolConstants.isPE(getVersion())) {
+                    network.ycc.waterdog.pe.packet.PEHandshake peHandshake =
+                            (network.ycc.waterdog.pe.packet.PEHandshake) handshake;
+                    if (onlineMode && BungeeCord.getInstance().config.isBedrockEncryption() && peHandshake.isAuthorized()) {
+                        try {
+                            network.ycc.waterdog.pe.PEEncryptionInitializer initializer =
+                                    new network.ycc.waterdog.pe.PEEncryptionInitializer(peHandshake.getPublicKey());
+                            unsafe().sendPacket(initializer.getRequest());
+                            ch.getHandle().flush();
+                            ch.getHandle().pipeline().addLast(initializer);
+                        } catch (java.security.InvalidKeyException e) {
+                            bungee.getLogger().log(Level.WARNING,
+                                    "Bad public key for " + InitialHandler.this + ": " + e.getMessage());
+                            startResourcePack();
+                        } catch (java.security.NoSuchAlgorithmException e) {
+                            bungee.getLogger().log(Level.SEVERE, e.getMessage(), e);
+                            disconnect(e.getMessage());
+                        }
+                    } else {
+                        startResourcePack();
+                    }
+                } else
+                // Waterdog end
                 if ( onlineMode )
                 {
                     unsafe().sendPacket( request = EncryptionUtil.encryptRequest() );
@@ -536,6 +598,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             userCon.setCompressionThreshold( BungeeCord.getInstance().config.getCompressionThreshold() );
                             userCon.init();
 
+                            // Waterdog start
+                            if (ProtocolConstants.isPE(getVersion())) {
+                                // NOOP
+                            } else
+                            // Waterdog end
                             unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
                             ch.setProtocol( Protocol.GAME );
 
@@ -612,10 +679,66 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         return ( name != null ) ? name : ( loginRequest == null ) ? null : loginRequest.getData();
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionResponse response) {
+        startResourcePack();
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest request) {
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendPackDataChunk(
+                ch.getHandle(), request.getPackUUID(), request.getChunkIndex(), getVersion());
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse response) {
+        switch (response.getStatus()) {
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_REFUSED: {
+                disconnect("disconnectionScreen.noReason");
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_SEND_PACKS: {
+                for (String packString : response.getPacks()) {
+                    final UUID uuid = UUID.fromString(packString.split("_")[0]);
+                    final network.ycc.waterdog.pe.PEResourcePackData pack =
+                            network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.get(uuid);
+                    if (pack == null) {
+                        disconnect("disconnectionScreen.resourcePack");
+                        break;
+                    }
+                    network.ycc.waterdog.pe.PERawPacketData.injectResourcePackInfo(ch.getHandle(), pack);
+                }
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_HAVE_ALL_PACKS: {
+                network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendResourceStack(this);
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_COMPLETED: {
+                finish();
+                break;
+            }
+        }
+        ch.getHandle().flush();
+    }
+
+    //TODO: can probably get rid of this
+    public int getDefaultVersion() {
+        return ch == null ? -1 : (ch.getHandle() instanceof network.ycc.raknet.server.channel.RakNetChildChannel ? ProtocolConstants.MINECRAFT_1_8 : -1);
+    }
+
+    public void startResourcePack() {
+        unsafe.sendPacket(new LoginSuccess());
+        ch.setProtocol( Protocol.GAME );
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendResourcePack(this);
+    }
+    // Waterdog end
+
     @Override
     public int getVersion()
     {
-        return ( handshake == null ) ? -1 : handshake.getProtocolVersion();
+        return ( handshake == null ) ? getDefaultVersion() : handshake.getProtocolVersion(); // Waterdog
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 4d8bac5d..e0a7e785 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -96,6 +96,11 @@ public class UpstreamBridge extends PacketHandler
         if ( con.getServer() != null )
         {
             Channel server = con.getServer().getCh().getHandle();
+            // Waterdog start
+            if (network.ycc.waterdog.pe.PEDimSwitchLock.isChannelLocked(channel.getHandle())) {
+                server.config().setAutoRead(false);
+            } else
+            // Waterdog end
             if ( channel.getHandle().isWritable() )
             {
                 server.config().setAutoRead( true );
@@ -118,6 +123,18 @@ public class UpstreamBridge extends PacketHandler
         if ( con.getServer() != null )
         {
             con.getEntityRewrite().rewriteServerbound( packet.buf, con.getClientEntityId(), con.getServerEntityId(), con.getPendingConnection().getVersion() );
+            // Waterdog start
+            if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+                if (con.getEntityRewrite() instanceof net.md_5.bungee.entitymap.EntityMap_PE) {
+                    net.md_5.bungee.entitymap.EntityMap_PE entityMap = (net.md_5.bungee.entitymap.EntityMap_PE) con.getEntityRewrite();
+                    java.util.Collection<java.util.UUID> playerList = con.getPePlayerList();
+
+                    entityMap.playerListTrackRewrite(packet.buf, playerList::add, playerList::remove,
+                            con.getUniqueId(), con.getPendingConnection().getLoginId());
+                }
+                //TODO: block rewrite?
+            }
+            // Waterdog end
             con.getServer().getCh().write( packet );
         }
     }
@@ -127,6 +144,17 @@ public class UpstreamBridge extends PacketHandler
     {
         KeepAliveData keepAliveData = con.getServer().getKeepAlives().poll();
 
+        // Waterdog start
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+            int newPing = (int) (alive.getRandomId() / 1000000);
+            con.getTabListHandler().onPingChange( newPing );
+            con.setPing( newPing );
+            if (con.getServer() != null && con.getServer().getInfo().isRakNet()) {
+                throw CancelSendSignal.INSTANCE; //only forward for TCP servers
+            }
+            return;
+        }
+        // Waterdog end
         if ( keepAliveData != null && alive.getRandomId() == keepAliveData.getId() )
         {
             int newPing = (int) ( System.currentTimeMillis() - keepAliveData.getTime() );
@@ -138,11 +166,42 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse command) throws Exception
+    {
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PECommand command) throws Exception
+    {
+        int maxLength = 256;
+        Preconditions.checkArgument( command.getMessage().length() <= maxLength, "PECommand message too long" ); // Mojang limit, check on updates
+        Preconditions.checkArgument(!StringUtil.isBlank(command.getMessage()), "PECommand message is empty");
+
+        ChatEvent chatEvent = new ChatEvent( con, con.getServer(), command.getMessage() );
+        if ( !bungee.getPluginManager().callEvent( chatEvent ).isCancelled() )
+        {
+            command.setMessage( chatEvent.getMessage() );
+            if ( !bungee.getPluginManager().dispatchCommand( con, command.getMessage().substring( 1 ) ) )
+            {
+                con.getServer().unsafe().sendPacket( command );
+            }
+        }
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
     @Override
     public void handle(Chat chat) throws Exception
     {
         int maxLength = ( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_11 ) ? 256 : 100;
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) maxLength = 1024; // Waterdog
         Preconditions.checkArgument( chat.getMessage().length() <= maxLength, "Chat message too long" ); // Mojang limit, check on updates
+        if (!ProtocolConstants.isPE(con.getPendingConnection().getVersion())) // Waterdog
         Preconditions.checkArgument(!StringUtil.isBlank(chat.getMessage()), "Chat message is empty");
 
         ChatEvent chatEvent = new ChatEvent( con, con.getServer(), chat.getMessage() );
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index e6afb98d..882ad3a0 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -27,6 +27,11 @@ public abstract class EntityMap
     // Returns the correct entity map for the protocol version
     public static EntityMap getEntityMap(int version)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(version)) {
+            return new EntityMap_PE(version);
+        }
+        // Waterdog end
         // Waterfall start
         if (net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isDisableEntityMetadataRewrite()) {
             return EntityMap_Dummy.INSTANCE;
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 6dc5633f..05be59b0 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -54,6 +54,11 @@ public class ChannelWrapper
             if ( packet instanceof PacketWrapper )
             {
                 ( (PacketWrapper) packet ).setReleased( true );
+                // Waterdog start - let RakNet and PECompressor pool and auto flush
+                if (ch.config() instanceof network.ycc.raknet.RakNet.Config) {
+                    ch.write( ( (PacketWrapper) packet ).buf, ch.voidPromise() );
+                } else
+                // Waterdog end
                 ch.writeAndFlush( ( (PacketWrapper) packet ).buf, ch.voidPromise() );
             } else
             {
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 989bfd87..9fb0d78d 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -164,6 +164,11 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                     {
                         handler, cause
                     } );
+                // Waterdog start
+                } else if (cause instanceof io.netty.handler.codec.CorruptedFrameException) {
+                    ProxyServer.getInstance().getLogger().log( Level.WARNING, handler + " - corrupt frame", cause );
+                    return; //log, but dont close
+                // Waterdog end
                 } else
                 {
                     ProxyServer.getInstance().getLogger().log( Level.SEVERE, handler + " - encountered exception", cause );
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java
index ef563aa5..7e79ee35 100644
--- a/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java
@@ -2,10 +2,9 @@ package network.ycc.waterdog.pe;
 
 import com.google.common.collect.MapMaker;
 
-import com.nukkitx.nbt.stream.NBTInputStream;
-import com.nukkitx.nbt.stream.NetworkDataInputStream;
-import com.nukkitx.nbt.tag.CompoundTag;
-import com.nukkitx.nbt.tag.ListTag;
+import com.nukkitx.nbt.NbtList;
+import com.nukkitx.nbt.NbtMap;
+import com.nukkitx.nbt.NbtUtils;
 import io.netty.buffer.ByteBuf;
 
 import io.netty.buffer.ByteBufInputStream;
@@ -19,8 +18,8 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 
 import org.apache.commons.lang3.tuple.Pair;
 
-import java.io.DataInput;
 import java.io.IOException;
+import java.io.InputStream;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.UUID;
@@ -97,14 +96,14 @@ public final class PEBlockPalette {
         if (version >= ProtocolConstants.MINECRAFT_PE_1_13) {
             int id = 0;
             try {
-                final DataInput is = new NetworkDataInputStream(new ByteBufInputStream(buf));
-                ListTag<CompoundTag> tag = (ListTag<CompoundTag>) new NBTInputStream(is).readTag();
+                final InputStream is  = new ByteBufInputStream(buf);
+                NbtList<NbtMap> tag = (NbtList<NbtMap>) NbtUtils.createNetworkReader(is).readTag();
 
-                for (CompoundTag item : tag.getValue()) {
-                    final CompoundTag block = item.getAsCompound("block");
+                for (NbtMap item : tag) {
+                    final NbtMap block = item.getCompound("block");
                     addEntry((short) id++,
-                            block.getAsString("name"),
-                            block.getAsCompound("states")
+                            block.getString("name"),
+                            block.getCompound("states")
                     );
                 }
             } catch (IOException e) {
diff --git a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
index 0c1ecfb8..6b4c81b8 100644
--- a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
+++ b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
@@ -70,7 +70,7 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
         ByteBuf in = msg.content();
         if ( in.readUnsignedByte() != 0xFE || in.readUnsignedByte() != 0xFD )
         {
-            bungee.getLogger().log( Level.WARNING, "Query - Incorrect magic!: {0}", msg.sender() );
+            //bungee.getLogger().log( Level.WARNING, "Query - Incorrect magic!: {0}", msg.sender() ); // Waterdog
             return;
         }
 
@@ -101,12 +101,16 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
             }
 
             // Waterfall start
+            // Waterdog start - rewrite event
             List<String> players = bungee.getPlayers().stream().map(ProxiedPlayer::getName).collect(Collectors.toList());
 
-            ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(), "SMP", "Waterfall_Proxy",
+            ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(),
+                    "SMP", "Waterdog_Proxy",
                     bungee.getOnlineCount(), listener.getMaxPlayers(), listener.getHost().getPort(),
-                    listener.getHost().getHostString(), "MINECRAFT",  players, bungee.getGameVersion()));
+                    listener.getHost().getHostString(), listener.isRakNet() ? "MINECRAFTPE" : "MINECRAFT",
+                    players, bungee.getGameVersion()));
             QueryResult result = bungee.getPluginManager().callEvent(event).getResult();
+            // Waterdog end
             // Waterfall end
 
             out.writeByte( 0x00 );
@@ -170,9 +174,30 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
         ctx.writeAndFlush( response );
     }
 
+    // Waterdog start
+    @Override
+    public boolean acceptInboundMessage(Object msg) throws Exception {
+        if (!listener.isRakNet()) {
+            return super.acceptInboundMessage(msg);
+        }
+        if (listener.isRakNet() && !listener.isQueryEnabled()) {
+            return false;
+        }
+        //PE UDP channel gets some garbage sometimes, so lets filter it out here
+        if (super.acceptInboundMessage(msg)) {
+            final ByteBuf data = ((DatagramPacket) msg).content();
+            return data.readableBytes() >= 2
+                    && data.getUnsignedByte(data.readerIndex()) == 0xFE
+                    && data.getUnsignedByte(data.readerIndex() + 1) == 0xFD;
+        }
+        return false;
+    }
+    // Waterdog end
+
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {
+        if (!listener.isRakNet()) // Waterdog
         bungee.getLogger().log( Level.WARNING, "Error whilst handling query packet from " + ctx.channel().remoteAddress(), cause );
     }
 
-- 
2.23.0.windows.1

